/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ic7cc.ovchinnikov.lab1;

import ic7cc.ovchinnikov.lab1.fa.FA;
import ic7cc.ovchinnikov.lab1.tree.ParseTree;
import ic7cc.ovchinnikov.lab1.util.RPNRegex;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import static org.junit.Assert.*;

public class FATest {

    @Test
    public void testRPN() {
        String rpn = RPNRegex.build("a|b*(a|b)*");

        assertEquals("ab*ab|*.|", rpn);
    }

    @Test
    public void testFirstPosRoot() {
        ParseTree parseTree = new ParseTree();

        ParseTree.ParseTreeNode treeRoot = parseTree.build("(a|b)*abb");

        assertEquals(Set.of(1, 2, 3), treeRoot.getFirstPos());
    }

    @Test
    public void testLastPosRoot() {
        ParseTree parseTree = new ParseTree();

        ParseTree.ParseTreeNode treeRoot = parseTree.build("(a|b)*abb");

        assertEquals(Set.of(6), treeRoot.getLastPos());
    }

    @Test
    public void testBuildParseTreeAndFollowPos() {
        ParseTree parseTree = new ParseTree();

        ParseTree.ParseTreeNode treeRoot = parseTree.build("(a|b)*abb");

        Map<Integer, Set<Integer>> expFollowPos = new HashMap<>();
        expFollowPos.put(1, Set.of(1, 2, 3));
        expFollowPos.put(2, Set.of(1, 2, 3));
        expFollowPos.put(3, Set.of(4));
        expFollowPos.put(4, Set.of(5));
        expFollowPos.put(5, Set.of(6));
        expFollowPos.put(6, null);

        Map<Integer, Set<Integer>> followPos = parseTree.getFollowPos();

        assertEquals(expFollowPos, followPos);
    }

    @Test
    public void testMinFA() {
        FA fa = new FA();
        fa.getAlphabet().add("a");
        fa.getAlphabet().add("b");

        fa.getStates().add("1");
        fa.getStates().add("2");
        fa.getStates().add("3");
        fa.getStates().add("4");
        fa.getStates().add("5");

        fa.getStart().add("1");
        fa.getEnd().add("5");

        fa.addTrans("1", "2", "a");
        fa.addTrans("1", "3", "b");
        fa.addTrans("2", "2", "a");
        fa.addTrans("2", "4", "b");
        fa.addTrans("3", "3", "b");
        fa.addTrans("3", "2", "a");
        fa.addTrans("4", "2", "a");
        fa.addTrans("4", "5", "b");
        fa.addTrans("5", "3", "b");
        fa.addTrans("5", "2", "a");

        System.out.println("Before: ");
        System.out.println("\tDFA: " + fa.getStates());
        System.out.println("\tDFA: " + fa.getTrans());
        System.out.println("\tAlphabet: " + fa.getAlphabet());
        System.out.println("\tStart: " + fa.getStart());
        System.out.println("\tEnd: " + fa.getEnd() + "\n");

        FA minFA = FA.minFA(fa);

        System.out.println("After: ");
        System.out.println("\tMin DFA: " + minFA.getStates());
        System.out.println("\tMin DFA: " + minFA.getTrans());
        System.out.println("\tAlphabet: " + minFA.getAlphabet());
        System.out.println("\tStart: " + minFA.getStart());
        System.out.println("\tEnd: " + minFA.getEnd() + "\n");

        assertTrue(minFA.getAlphabet().contains("a"));
        assertTrue(minFA.getAlphabet().contains("b"));
        assertEquals(2, minFA.getAlphabet().size());
        assertEquals(1, minFA.getStart().size());
        assertEquals(1, minFA.getEnd().size());
        assertNotEquals(fa.getStates().size(), minFA.getStates().size());
        assertNotEquals(fa.getTrans().size(), minFA.getTrans().size());
    }
}
